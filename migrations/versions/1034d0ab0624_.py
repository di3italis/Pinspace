"""empty message

Revision ID: 1034d0ab0624
Revises:
Create Date: 2024-08-02 20:29:17.448511

"""

from alembic import op
import sqlalchemy as sa

from sqlalchemy.engine.reflection import Inspector

import os

SCHEMA = os.environ.get("SCHEMA")
environment = os.environ.get("FLASK_ENV")


# revision identifiers, used by Alembic.
revision = "1034d0ab0624"
down_revision = None
branch_labels = None
depends_on = None

#
conn = op.get_bind()
inspector = Inspector.from_engine(conn)
tables = inspector.get_table_names()
# and then check if table already exists or not
#
def inDB(table_name):
    return table_name in tables

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
#   if inDB("users"):
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(length=20), nullable=False),
        sa.Column("last_name", sa.String(length=50), nullable=False),
        sa.Column("username", sa.String(length=40), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("profile_image", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")

    op.create_table(
        "boards",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("ownerId", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ownerId"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE boards SET SCHEMA {SCHEMA};")

    op.create_table(
        "pins",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("image", sa.String(length=255), nullable=False),
        sa.Column("title", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("ownerId", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ownerId"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE pins SET SCHEMA {SCHEMA};")

    op.create_table(
        "board_pins",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("pinId", sa.Integer(), nullable=False),
        sa.Column("boardId", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["boardId"],
            ["boards.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE board_pins SET SCHEMA {SCHEMA};")

    op.create_table(
        "comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("comment", sa.String(length=250), nullable=False),
        sa.Column("pinId", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pinId"],
            ["pins.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE comments SET SCHEMA {SCHEMA};")

    op.create_table(
        "labels",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("label", sa.String(length=15), nullable=False),
        sa.Column("pinId", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pinId"],
            ["pins.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    if environment == "production":
        op.execute(f"ALTER TABLE comments SET SCHEMA {SCHEMA};")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("labels")
    op.drop_table("comments")
    op.drop_table("board_pins")
    op.drop_table("pins")
    op.drop_table("boards")
    op.drop_table("users")
    # ### end Alembic commands ###
